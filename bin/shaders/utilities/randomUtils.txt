uniform samplerBuffer gaussianTexture;
uniform int numGaussianTextureSamples;
uniform sampler2D perlinNoise;

struct GaussianSample
{
	float s;
	float p;
};

GaussianSample gaussRand(int index)
{
	int sampleIndex = index;
	sampleIndex = int(abs(mod(sampleIndex,numGaussianTextureSamples)));
	vec4 fetch = texelFetch(gaussianTexture,sampleIndex);
	GaussianSample gs;
	gs.s = fetch.x;
	gs.p = fetch.y;
	return gs;
}

vec2 randomSeed;
float random()
{
   float r = fract(sin(dot(randomSeed.xy,vec2(12.9898,78.233))) * 43758.5453);
   randomSeed = vec2(3.5*(r + 1.3),r*7 -12.0);
   return r;
}
float random(vec2 co)
{
   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);
}
vec3 randomDirection(vec3 n)
{
	vec3 dir;
	dir = vec3(1.0 - 2.0*random(),1.0 - 2.0*random(),1.0 - 2.0*random()) + n*20.0;
	dir = normalize(dir);
	if(dot(dir,n) < 0)
	{
		dir = -dir;
	}
	return dir;
}
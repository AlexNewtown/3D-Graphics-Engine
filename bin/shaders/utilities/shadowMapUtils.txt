const int MAX_NUM_LIGHTS = 30;
uniform int numLightMaps;
uniform mat4 lightCameraMatrix[MAX_NUM_LIGHTS];
uniform vec4 lightPosition[MAX_NUM_LIGHTS];
uniform sampler2DArray depthMap;
uniform float frustumDepth;

float shadowed(vec4 position);
vec3 shadowedTranslucent(vec4 position, vec3 globalPosition, vec3 normal);
float sinTheta(vec3 p);
float cosTheta(vec3 p);

vec4 cylindricalProjection(vec3 eyeCoords,float nearP, float farP);
float cosPhi(vec3 p);
float sinPhi(vec3 p);
float theta(vec3 p);
float phi(vec3 p);

float shadowed(vec4 position)
{
	float s = 0;
	for(int i=0; i< numLightMaps; i++)
	{
		vec4 lightCameraTransform = matrixMult(lightCameraMatrix[i],position);

		if(!isVertexClipped(lightCameraTransform) )
		{
			lightCameraTransform = perspectiveDivide(lightCameraTransform);
			lightCameraTransform = windowCoordinates(lightCameraTransform);
			
			vec2 depthLookup = vec2(lightCameraTransform.x,lightCameraTransform.y);
			float d = lightCameraTransform.z;

			for(int x=-1; x <= 1; x++)
			{
				for(int y=-1; y <= 1; y++)
				{

					vec2 texLookup = vec2(lightCameraTransform);
					float r1 = x*0.0001;
					float r2 = y*0.0001;
					texLookup = texLookup + vec2(r1,r2);
					vec4 depth = texture(depthMap,vec3(vec2(texLookup),float(i)));
						
					float eps = 0.0005;
					float dist = (lightCameraTransform.z - depth.x);
					
					if(dist  <= eps)
						s = s + 1.0;
					else
						s = s + exp(-500.0*dist);
				}
			}
		}
	}
	return s/9.0;
}

vec3 shadowedTranslucent(vec4 position, vec3 globalPosition, vec3 normal)
{
	vec3 s = vec3(0.0,0.0,0.0);
	for(int i=0; i< numLightMaps; i++)
	{
		vec4 lightCameraTransform = matrixMult(lightCameraMatrix[i],position);
		vec3 lightDirection = normalize(vec3(lightCameraTransform));
		if(!isVertexClipped(lightCameraTransform))
		{
			lightCameraTransform = perspectiveDivide(lightCameraTransform);
			lightCameraTransform = windowCoordinates(lightCameraTransform);
		

			vec2 depthLookup = vec2(lightCameraTransform.x,lightCameraTransform.y);
			float d = lightCameraTransform.z;
			
			vec4 depth = texture(depthMap,vec3(vec2(lightCameraTransform),float(i)));
			
			float eps = 0.0001;
			float dist = (lightCameraTransform.z - depth.x);

			if(dist  <= eps)
				s = s + vec3(1.0,1.0,1.0);
			else if( lightCameraTransform.z > depth.x)
			{
				/*
				dist = dist*frustumDepth;
				vec3 xIn = globalPosition - lightDirection*dist;
				vec3 a = vec3(0.032,0.17,0.48);
				vec3 rs = vec3(0.74,0.88,1.01);
				s = s + reducedIncidentRadiance(xIn,globalPosition,normal,a,rs,1.44);
				*/
				s = s + exp(-300.0*dist)*vec3(1.0,1.0,1.0);
			}
		}
	}
	return s;
}

float sinTheta(vec3 p)
{
	float h = p.x*p.x + p.z*p.z;
	h = sqrt(h);
	if(h == 0)
		return 0;
	return p.x/h;
}
float cosTheta(vec3 p)
{
	float h = p.x*p.x + p.z*p.z;
	h = sqrt(h);
	if(h == 0)
		return 0;
	return (-p.z)/h;
}

float cosPhi(vec3 p)
{
	return p.y;
}

float sinPhi(vec3 p)
{
	return sqrt(1.0 - p.y*p.y);
}

float theta(vec3 p)
{
	float t;
	float h = p.x*p.x + p.z*p.z;
	h = sqrt(h);
	if(p.z < 0)
	{
		t = acos((-p.z)/h);
	}
	else
	{
		t = 3.14159265 - acos(p.z/h);
	}

	if(p.x < 0)
	{
		t = -t;
	}
	return t;
}

float phi(vec3 p)
{
	return acos(p.y);
}

vec4 cylindricalProjection(vec3 eyeCoords,float nearP, float farP)
{
	vec3 directionToPoint = normalize(eyeCoords);
	float lon = theta(directionToPoint);
	float lat = phi(directionToPoint);
	float d = length(eyeCoords);
	d = d/(farP - nearP);
	vec4 c = vec4(lon/3.1415926,lat/3.1415926,d,1.0);
	return c;
}

